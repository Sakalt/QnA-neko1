[
  {
    "input": "kmallocとは何ですか？",
    "category": "メモリ管理",
    "token": "kmalloc",
    "output": "kmallocはLinuxカーネルで物理的に連続したメモリを動的に割り当てるための関数です。主に小さなメモリブロックの割り当てに使用されます。"
  },
  {
    "input": "vmallocとは何ですか？",
    "category": "メモリ管理",
    "token": "vmalloc",
    "output": "vmallocはLinuxカーネルで仮想的に連続したメモリを割り当てるための関数です。大きなメモリ領域の割り当てに適しています。"
  },
  {
    "input": "C言語とは何ですか？",
    "category": "プログラミング言語",
    "token": "C言語",
    "output": "C言語は汎用の手続き型プログラミング言語で、システムソフトウェアやアプリケーションソフトウェアの開発に広く使用されています。低レベルなメモリ操作が可能で、高いパフォーマンスを持ちます。"
  },
  {
    "input": "ポインタとは何ですか？",
    "category": "C言語基礎",
    "token": "ポインタ",
    "output": "ポインタは、他の変数やメモリ位置のアドレスを保持する変数です。ポインタを使うことで、メモリ操作やデータ構造の管理が効率的に行えます。"
  },
  {
    "input": "配列とポインタの違いは何ですか？",
    "category": "C言語基礎",
    "token": "配列_vs_ポインタ",
    "output": "配列は固定長のメモリブロックを指し示す名前付きの集合で、ポインタはそのメモリブロックのアドレスを指します。配列はサイズが固定されているのに対し、ポインタは自由にメモリブロックを指し示すことができます。"
  },
  {
    "input": "malloc関数とは何ですか？",
    "category": "C言語基礎",
    "token": "malloc",
    "output": "mallocはC言語でメモリを動的に割り当てるための関数で、指定されたサイズのメモリブロックの先頭アドレスを返します。割り当てられたメモリは、使用後にfree関数で解放する必要があります。"
  },
  {
    "input": "free関数とは何ですか？",
    "category": "C言語基礎",
    "token": "free",
    "output": "freeは、mallocやcalloc、reallocで動的に割り当てられたメモリを解放するための関数です。これにより、メモリリークを防ぐことができます。"
  },
  {
    "input": "構造体とは何ですか？",
    "category": "C言語基礎",
    "token": "構造体",
    "output": "構造体は、異なる型のデータを1つにまとめて扱うためのユーザー定義のデータ型です。複数のメンバを持つことができ、データを一元管理するのに便利です。"
  },
  {
    "input": "関数ポインタとは何ですか？",
    "category": "C言語基礎",
    "token": "関数ポインタ",
    "output": "関数ポインタは、関数のアドレスを保持するポインタで、他の関数を呼び出す際に動的に関数を選択するために使用されます。"
  },
  {
    "input": "ポインタと参照の違いは何ですか？",
    "category": "C言語基礎",
    "token": "ポインタ_vs_参照",
    "output": "ポインタはメモリアドレスを指す変数で、明示的にメモリ操作が可能です。一方、参照（C++の場合）はオブジェクトへの別名であり、ポインタのようにnullに設定することはできません。"
  },
  {
    "input": "ポインタの配列とは何ですか？",
    "category": "C言語基礎",
    "token": "ポインタの配列",
    "output": "ポインタの配列とは、複数のポインタを要素として持つ配列のことです。それぞれのポインタは異なるメモリブロックを指すことができます。"
  },
  {
    "input": "再帰関数とは何ですか？",
    "category": "C言語基礎",
    "token": "再帰関数",
    "output": "再帰関数とは、自分自身を呼び出す関数のことです。複雑な問題を小さなサブ問題に分割して解決するのに便利です。"
  },
  {
    "input": "if文とは何ですか？",
    "category": "C言語基礎",
    "token": "if文",
    "output": "if文は、条件式が真の場合にブロック内のコードを実行する制御構文です。条件が偽の場合は実行されません。"
  },
  {
    "input": "forループとは何ですか？",
    "category": "C言語基礎",
    "token": "forループ",
    "output": "forループは、指定された回数だけ繰り返し処理を行うループ構造です。初期化、条件式、増分式を一行で記述できます。"
  },
  {
    "input": "switch文とは何ですか？",
    "category": "C言語基礎",
    "token": "switch文",
    "output": "switch文は、複数の条件分岐を効率的に処理するための構文です。値に応じて異なるケースを実行します。"
  }
]
